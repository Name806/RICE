mod transposition_table;
mod move_heuristics;
mod eval_data;

use move_heuristics::MoveSorter;
use eval_data::EvalData;
use transposition_table::{TranspositionTable, Bound};

use crate::common::{AllMoveData, Pieces, Constants, Color, ZobristHashes};
use crate::move_generation::{Game, EncodedMove, GameState};
use crate::score::Score;

use std::cmp::{max, min};

pub struct Engine {
    name: &'static str,
    author: &'static str,
    game: Game,
    move_data: AllMoveData,
    transposition_table: TranspositionTable,
}

impl Engine {
    pub fn new(move_data: &AllMoveData, hashes: &ZobristHashes) -> Self {
        let game = Game::new_starting(move_data, hashes);
        Self {
            name: "RICE",
            author: "Parker White",
            game,
            move_data: move_data.clone(),
            transposition_table: TranspositionTable::new(),
        }
    }

    pub fn get_move(&self) -> EncodedMove {
        let mut moves = Vec::new();
        self.game.generate_moves(&mut moves);
        
        moves[0]
    }

    pub fn set_game(&mut self, game: Game) {
        self.game = game;
    }

    pub fn game_string(&self) -> String {
        format!("{}", self.game)
    }

    pub fn get_id_info(&self) -> (&'static str, &'static str) { (self.name, self.author) }

    pub fn search_to_depth(&mut self, depth: u8) {
        self.negamax(depth, 0, Score::Checkmate((false, 0)), Score::Checkmate((true, 0)));
    }

    pub fn get_best_found_move(&self) -> EncodedMove {
        if let Some(game_entry) = self.transposition_table.lookup(self.game.hash, 0) {
            if let Some(m) = game_entry.best_move {
                return m;
            }
        }

        self.get_move()
    }

    pub fn no_search_best_eval(&mut self) -> EncodedMove {
        let mut moves = Vec::new();
        self.game.generate_moves(&mut moves);
        let mut best_move = moves[0];
        let mut max_eval = Score::Checkmate((false, 0));
        for m in moves {
            self.game.make_move(&m);
            let eval = self.evaluate_position();
            self.game.unmake_move();
            if eval > max_eval {
                best_move = m;
                max_eval = eval;
            }
        }
        best_move
    }

    fn evaluate_position(&self) -> Score {
        let score = Score::Playing(self.evaluate_side(Color::WHITE) - self.evaluate_side(Color::BLACK))
        f self.game.side = Color::WHITE 
    }

    fn evaluate_side(&self, side: Color) -> i32 {
        let mut score = 0;
        for piece_index in 0..6 {
            let mut piece_positions = self.game.piece_positions[side as usize][piece_index];
            while let Some(piece_square) = piece_positions.pop_ls1b() {
                score += EvalData::MATERIAL_VALUE[piece_index];
                let piece_type = Pieces::int_to_piece(piece_index as u8);
                let num_controlled_squares = self.move_data.get_attacks(piece_square, &piece_type, side, &self.game.occupancies[Constants::BOTH_OCCUPANCIES]).count_bits();
                score += num_controlled_squares as i32 * EvalData::MOBILITY_VALUE[piece_index];
            }
        }

        score
    }

    // call with -inf, inf for full search
    fn negamax(&mut self, depth: u8, ply: u32, mut alpha: Score, mut beta: Score) -> Score {
        let original_alpha = alpha;

        let mut best_move = None;
        if let Some(entry) = self.transposition_table.lookup(self.game.hash, depth) {
            match entry.bound {
                EXACT => return entry.score,
                LOWER => alpha = max(alpha, entry.score),
                UPPER => beta = min(beta, entry.score),
            }
            best_move = entry.best_move;
        }

        if depth == 0 {
            return self.quiescence(ply, alpha, beta);
        }

        let mut moves = Vec::new();
        let game_state = self.game.generate_moves(&mut moves);
        match game_state {
            GameState::Checkmate => return Score::Checkmate((false, ply)),
            GameState::Draw => return Score::Draw,
            GameState::Normal => (),
        }

        let moves = MoveSorter::sort(moves);
        let mut value = Score::Checkmate((false, 0));
        for m in moves {
            self.game.make_move(&m);
            let new_value = -self.negamax(depth - 1, ply + 1, -beta, -alpha);
            self.game.unmake_move();
            if new_value > value { 
                value = new_value; 
                best_move = Some(m);
            }
            if value > alpha { alpha = value; }
            if alpha > beta { break; }
        }

        let bound = if value <= original_alpha {
            Bound::Upper
        } else if value >= beta {
            Bound::Lower
        }
        else {
            Bound::Exact
        };

        self.transposition_table.store(self.game.hash, value, bound, depth, best_move);

        value
    }

    fn quiescence(&mut self, ply: u32, mut alpha: Score, beta: Score) -> Score {
        let stand_pat = -self.evaluate_position();
        let mut best_value = stand_pat;
        if stand_pat >= beta { return stand_pat; }
        if alpha < stand_pat { alpha = stand_pat; }

        let mut moves = Vec::new();
        let game_state = self.game.generate_moves(&mut moves);
        match game_state {
            GameState::Checkmate => return Score::Checkmate((false, ply)),
            GameState::Draw => return Score::Draw,
            GameState::Normal => (),
        }

        let moves = MoveSorter::sort(moves);

        for m in moves {
            if !(m.capture().is_some() || m.promoted_piece().is_some() || m.castle()) {
                break;
            }

            self.game.make_move(&m);
            let score = -self.quiescence(ply + 1, -beta, -alpha);
            self.game.unmake_move();

            if score >= beta { return score; }
            if score > best_value { best_value = score; }
            if score > alpha { alpha = score; }
        }

        best_value
    }
}


